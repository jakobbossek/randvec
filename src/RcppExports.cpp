// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// randvec_normalization
NumericMatrix randvec_normalization(int n, int d);
RcppExport SEXP _randvec_randvec_normalization(SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(randvec_normalization(n, d));
    return rcpp_result_gen;
END_RCPP
}
// randvec_iterative
NumericMatrix randvec_iterative(int n, int d);
RcppExport SEXP _randvec_randvec_iterative(SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(randvec_iterative(n, d));
    return rcpp_result_gen;
END_RCPP
}
// randvec_simplex
NumericMatrix randvec_simplex(int n, int d);
RcppExport SEXP _randvec_randvec_simplex(SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(randvec_simplex(n, d));
    return rcpp_result_gen;
END_RCPP
}
// randvec_trigonometric
NumericMatrix randvec_trigonometric(int n, int d);
RcppExport SEXP _randvec_randvec_trigonometric(SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(randvec_trigonometric(n, d));
    return rcpp_result_gen;
END_RCPP
}
// randvec_exponential
NumericMatrix randvec_exponential(int n, int d);
RcppExport SEXP _randvec_randvec_exponential(SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(randvec_exponential(n, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_randvec_randvec_normalization", (DL_FUNC) &_randvec_randvec_normalization, 2},
    {"_randvec_randvec_iterative", (DL_FUNC) &_randvec_randvec_iterative, 2},
    {"_randvec_randvec_simplex", (DL_FUNC) &_randvec_randvec_simplex, 2},
    {"_randvec_randvec_trigonometric", (DL_FUNC) &_randvec_randvec_trigonometric, 2},
    {"_randvec_randvec_exponential", (DL_FUNC) &_randvec_randvec_exponential, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_randvec(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
